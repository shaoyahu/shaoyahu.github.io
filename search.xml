<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人博客网址的第一篇新建博客</title>
      <link href="/2022/05/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/05/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>欢迎大家来到我的个人博客网址,现在还算是比较简陋的地方了。<br>那这么个第一篇博客到底写些什么东西呢?</p><p>首先，<strong>欢迎你!!</strong></p><p>既然都已经欢迎过了，接下来就写一写学习计划的安排吧，在这里随时可以看见也可以当做是激励我自己了，</p><p>事先说明，我实在是小菜鸟一个😂</p><p>学习计划</p><ol><li><p>Typescript</p><p>作为安全的js语言，若想要在前端的世界继续前进，这是非常有必要的</p></li><li><p>Vue3</p><p>已经升级到了正式推荐使用3版本的Vue自然是首当其冲需要学习的目标啦，作为使用ts的前端框架，也只好屈居于ts的学习之后咯</p></li><li><p>E-charts</p><p>图表能力可以说是不少地方都需要用到的，怎么可以就这样落下!!</p></li><li><p>React/Node.js</p><p>我承认有点人云亦云的味道了，所以在React和node之间我还是蛮犹豫的先学习哪一个，相比于已经学习了Vue来怎么说也是node更香吧</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6~11新特性一网打尽!</title>
      <link href="/2022/05/02/ES6-11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD/"/>
      <url>/2022/05/02/ES6-11%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6到ES11新特性学习"><a href="#ES6到ES11新特性学习" class="headerlink" title="ES6到ES11新特性学习"></a>ES6到ES11新特性学习</h2><p><strong>本笔记内容课程来源于B站尚硅谷视频学习记录</strong><br>文件下载链接：<a href="https://download.csdn.net/download/shaoyahu/85266922">https://download.csdn.net/download/shaoyahu/85266922</a><br>javascript ES6~11 新特性学习</p><p>ECMA 欧洲计算机制造商协会</p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><strong>ES6</strong></h1><p>**</p><blockquote><p><strong>1.let 变量声明以及声明特性</strong></p></blockquote><p>**</p><pre><code>1.变量不能重复声明</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>2.块级作用域    (全局，函数，eval)</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.不存在变量提升</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//报错</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>4.不影响作用域链</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//1,从函数体找到外面</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>2.const 声明变量以及特点</strong></p></blockquote><pre><code>1.一定要赋初始值</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a<span class="token punctuation">;</span>    <span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.一般常量使用大写(潜规则)</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.常量的值不能修改</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>4.块级作用域</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>  <span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5.对于数组和对象的元素修改，不算做对常量的修改，不会报错</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TEAM</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token constant">TEAM</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment">//正常执行</span><span class="token keyword">const</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'shaoyahu'</span><span class="token punctuation">}</span><span class="token constant">OBJ</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment">//正常执行 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>3.变量的解构赋值</strong></p></blockquote><pre><code>ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值1.数组的解构 - 变量名可以不同</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TEAM</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token punctuation">[</span>aa<span class="token punctuation">,</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">,</span>dd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">TEAM</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span> <span class="token comment">//'a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span> <span class="token comment">//'b'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token comment">//'c'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span> <span class="token comment">//'d'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.对象的解构 - 变量名要求相同</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'shaoyahu'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token function-variable function">read</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'read something !'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>read<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">OBJ</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment">//'shaoyahu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>   <span class="token comment">//18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span>   <span class="token comment">//function(){console.log('read something !')}</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">//read something !</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>4.模板字符串</strong></p></blockquote><pre><code>ES6 引入新的声明字符串的方式 ``1.声明</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">字符串一个</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.内容中可以直接出现换行符(可以直接换行)</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul&gt;            &lt;li&gt;1&lt;/li&gt;            &lt;li&gt;2&lt;/li&gt;        &lt;/ul&gt;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.变量拼接</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'shaoyahu'</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">//我叫shaoyahu，今年18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>5.对象的简化写法</strong></p></blockquote><pre><code>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法1.书写简洁</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'shaoyahu'</span><span class="token keyword">let</span> <span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do some reading !'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span>    read<span class="token punctuation">,</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run now !'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token constant">PERSON</span><span class="token punctuation">.</span>name     <span class="token comment">// 'shaoyahu'</span><span class="token constant">PERSON</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// do some reading !</span><span class="token constant">PERSON</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// run now !</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>6.箭头函数以及声明特点</strong></p></blockquote><pre><code>ES6 允许使用箭头(=&gt;)定义函数适合与 this 无关的回调，定时器，数组的方法回调不适合与 this 有关的回调，事件回调，对象的方法1.声明一个函数</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.this是静态的，始终指向函数声明时所在作用域下的this的值</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'shaoyahu'</span><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'邵雅虎'</span><span class="token punctuation">}</span><span class="token comment">//直接调用</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// shaoyahu</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// shaoyahu</span><span class="token comment">//call调用</span><span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token constant">PERSON</span><span class="token punctuation">)</span>  <span class="token comment">// 邵雅虎</span><span class="token function">fn2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token constant">PERSON</span><span class="token punctuation">)</span>  <span class="token comment">// shaoyahu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.不能作为构造函数实例化对象</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'shaoyahu'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span> <span class="token comment">// 报错:Person不是一个构造器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4.不能使用arguments变量</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// 报错:arguments未定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5.箭头函数的简写    1.省略小括号，当形参有且只有一个时</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>    2.省略花括号，当代码体只有一条语句时,此时return必须省略，而且语句的执行结果就是函数的返回值</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>7.函数参数默认值设置</strong></p></blockquote><pre><code>ES6 允许给函数参数赋值初始值1.形参初始值 - 具有默认值的参数，一般位置要靠后(潜规则)</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">// fn(1,2,3)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>     <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.与解构赋值结合使用 - 无需考虑顺序，只需要属性名对上</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>8.rest 参数</strong></p></blockquote><pre><code>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments1.获取实参</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'shaoyahu'</span><span class="token punctuation">,</span><span class="token string">'邵雅虎'</span><span class="token punctuation">)</span> <span class="token comment">// ['shaoyahu','邵雅虎']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.rest 参数必须要放到参数最后</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment">// [3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>9.扩展运算符</strong></p></blockquote><pre><code>ES6 扩展运算符能将数组转换为逗号分隔的参数序列1.分隔数组</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span> <span class="token comment">// 6 = 1 + 2 + 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>10.Symbol 的介绍和创建</strong></p></blockquote><pre><code>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值，他是JavaScript语言的第七种数据类型，是一种类似于字符串的数据类型1.特点    1.Symbol 的值是唯一的，用来解决命名冲突的问题    2.Symbol 值不能与其他数据进行运算    3.Symbol 定义的对象属性不能使用 for...in 循环遍历，但是可以使用 Reflect.ownKeys 来获取对象的所有键名</code></pre><ul><li><pre><code>  // 数据类型总结</code></pre></li><li><pre><code>  // USONB you are so niubility</code></pre></li><li><pre><code>  // u undefined</code></pre></li><li><pre><code>  // s string symbol</code></pre></li><li><pre><code>  // o object</code></pre></li><li><pre><code>  // n null number</code></pre></li><li><pre><code>  // b boolean</code></pre></li></ul><pre><code>2.Symbol 内置值 -&gt; Symbol的属性作为对象的属性来使用 (用到再学，机会不大)</code></pre><blockquote><p><strong>11.迭代器 Iterator</strong></p></blockquote><pre><code>Iterator是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据解构只要部署 Iterator 接口，就可以完成遍历操作ES6 创造了一种新的遍历命令 for...of 循环，Iterator接口主要供 for...of 消费原生具备 Iterator 接口的数据    Array    arguments    Set    Map    String    TypedArray    NodeList工作原理    1.创建一个指针对象，指向当前数据结构的起始位置    2.第一次调用对象的next方法，指针自动指向数据结构的第一个成员    3.接下来不断调用next方法，指针一直向后移动，知道指向最后一个成员    4.每调用next方法返回一个包含value和done属性的对象</code></pre><blockquote><p><strong>12.生成器</strong></p></blockquote><pre><code>ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</code></pre><blockquote><p><strong>13.promise</strong></p></blockquote><pre><code>ES6 引入的异步编程的新解决方案，语法上是一个构造函数用来封装异步操作并可以获取其成功或失败的结果const p = new Promise((resolve,reject)=&gt;{})</code></pre><blockquote><p><strong>14.Set</strong></p></blockquote><pre><code>ES6 提供了新的数据结构 Set (集合)，它类似于数组，但是成员的值都是唯一的，集合实现了 iterator接口，所以可以使用扩展运算符和 for..of 进行遍历集合的属性和方法1.size      返回集合的元素个数2.add       增加一个新元素，返回当前集合3.delete    删除元素，返回boolean值4.has       检测集合中是否包含某个元素，返回boolean值</code></pre><blockquote><p><strong>15.Map</strong></p></blockquote><pre><code>ES6 提供了 Map 数据结构，它类似于对象，也是键值对的集合，但是键的范围不限于字符串，各种类型的值包括对象都可以当作键。 Map 也实现了iterator接口，所以可以使用扩展运算符和 for...of 进行遍历Map的属性和方法1.size      返回 Map 的元素个数2.set       增加一个新元素，返回当前 Map 3.get       返回键名对象的键值4.has       检测 Map 中是否包含某个元素，返回boolean值5.clear     清空集合 ，返回 undefined</code></pre><blockquote><p><strong>16.class 类</strong></p></blockquote><pre><code>ES6 提供了更接近传统语言的写法，引入了 Class 类这个概念，作为对象的模板。通过 class 关键字，可以定义类，基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已知识点1.class声明类2.constructor定义构造函数初始化3.extends继承父类4.super调用父级构造方法5.static定义静态方法和属性6.父类方法可以重写</code></pre><blockquote><p><strong>17.模块化</strong></p></blockquote><pre><code>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来1.模块化的优势    1.防止命名冲突    2.代码复用    3.高维护性2.模块化规范产品 ES6 之前的模块化规范有    1.CommonJS =&gt; NodeJS、Browserify    2.AMD      =&gt; requireJS    3.CMD      =&gt; seaJS3.ES6 模块化语法    模块功能主要由两个命令构成：export和import    export命令用于规定模块的对外接口    import命令用于输入其他模块提供的功能    分别暴露、统一暴露、默认暴露</code></pre><h2 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h2><blockquote><p><strong>18.Array.prototype.includes</strong></p></blockquote><pre><code>ES7 提供 includes 方法来检测数组中是否包含某个元素，返回布尔值类型</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>   <span class="token comment">//true</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span>   <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>**19.指数操作符 ****</p></blockquote><pre><code>ES7 提供 ** 指数运算符，用来实现幂运算，功能与Math.pow结果相同</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token comment">// 8</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h2><blockquote><p><strong>20.async 函数</strong></p></blockquote><pre><code>ES8 提供 async 函数async函数返回值为promise对象且这个对象的结果由async函数执行的返回值决定当返回值不是一个promise对象，那就返回成功的promise</code></pre><blockquote><p><strong>21.await 表达式</strong></p></blockquote><pre><code>1.await 必须写在async函数中2.await 右侧的表达式一般为promise对象3.await 返回的时promise成功的值4.await 的promise失败了就会抛出异常，需要通过try...catch捕获处理</code></pre><blockquote><p><strong>22.对象方法扩展</strong></p></blockquote><pre><code>ES8 提供新的对象方法1.Object.values    返回一个给定对象的所有可枚举属性 值 的数组</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> school<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'一小'</span><span class="token punctuation">,</span>    <span class="token literal-property property">add</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'浙江'</span><span class="token punctuation">,</span><span class="token string">'温州'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>   <span class="token comment">// ['一小',['浙江','温州']]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.Object.entries    返回一个给定对象自身可遍历属性[key,value]的数组</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>  <span class="token comment">// [['name','一小'],['add',['浙江','温州']]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.Object.getOwnPropertyDescriptors    返回对象属性的描述对象</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>    <span class="token comment">// name:{value:'一小',writable:true,enumerable:true,configurable:true}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h2><blockquote><p><strong>23.扩展运算符</strong></p></blockquote><pre><code>ES9 为对象提供了像数组一样的 rest 参数和扩展运算符</code></pre><blockquote><p><strong>24.正则扩展-命名捕获分组</strong></p></blockquote><pre><code>ES9 提供正则的命名捕获分组</code></pre><blockquote><p><strong>25.正则扩展-反向断言</strong></p></blockquote><pre><code>ES9 提供反向断言 (?&lt;=)</code></pre><blockquote><p><strong>26.正则扩展-dotAll模式</strong></p></blockquote><pre><code>.*</code></pre><h2 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h2><blockquote><p><strong>27.对象方法扩展</strong></p></blockquote><pre><code>ES10 提供新的对象方法1.Object.fromEntries</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//二维数组</span><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'邵雅虎'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'18,20,22'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//Map</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'邵雅虎'</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>28.字符串方法扩展</strong></p></blockquote><pre><code>ES10 提供新的字符串方法1.trimStart     清除字符串左侧空白2.trimEnd    清除字符串右侧空白</code></pre><blockquote><p><strong>29.数组方法扩展</strong></p></blockquote><pre><code>ES10 提供新的数组方法1.flat    将多维数组转化为低维数组</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,5]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,[5,6]]</span><span class="token comment">// 参数为深度 是一个数字，默认值是1</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.flatMap</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// [[10],[20],[30],[40]]</span>arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// [10,20,30,40]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>30.Symbol扩展</strong></p></blockquote><pre><code>ES10 提供新的Symbol方法1.Symbol.prototype.description    获取Symbol的字符串描述</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">'邵雅虎'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>description   <span class="token comment">// 邵雅虎</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h2><blockquote><p><strong>31.私有属性</strong></p></blockquote><pre><code>ES11 新增私有属性</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//共有属性</span>    name    <span class="token comment">//私有属性</span>    #age    #hobby    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>hobby</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>#age <span class="token operator">=</span> age        <span class="token keyword">this</span><span class="token punctuation">.</span>#hobby <span class="token operator">=</span> hobby    <span class="token punctuation">}</span>    <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#age<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#hobby<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//实例化</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'邵雅虎'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'read'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 邵雅虎</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>#age<span class="token punctuation">)</span> <span class="token comment">// 报错获取不到</span>p<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 邵雅虎 18 read</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>32.Promise.allSettled</strong></p></blockquote><pre><code>ES11 新增方法</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//调用 allSettled 方法</span>Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 总是为成功，返回的数组中的结果由p1,p2决定</span><span class="token comment">//调用 all 方法</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 都成功为成功，有失败为失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>33.字符串方法扩展</strong></p></blockquote><pre><code>ES11 提供新的字符串方法1.String.prototype.matchAll    用来得到正则批量匹配的结果</code></pre><blockquote><p><strong>34.可选链操作符</strong></p></blockquote><pre><code>ES11 新增可选链操作符 ?.省略层层判断的操作</code></pre><blockquote><p><strong>35.动态import   =&gt; 按需加载、懒加载</strong></p></blockquote><pre><code>可以动态引入 import    静态引入 一开始就加载进来</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m <span class="token keyword">from</span> <span class="token string">'./练习使用附件/29模块化js文件.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    动态引入 使用时才加载进来</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./练习使用附件/29模块化js文件.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    module<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>36.BigInt类型</strong></p></blockquote><pre><code>ES11 提供新的数据类型大整形 BigInt1.声明 在正常的定义整形的末尾加个n</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">123n</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.将普通整数转为大整形 浮点型会报错，只能使用整数</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token function">BigInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>   <span class="token comment">// 123n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>3.大数值运算</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>max<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> max<span class="token operator">+</span><span class="token number">2</span>  <span class="token comment">//true</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1n</span> <span class="token operator">==</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2n</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>37.绝对全局对象 globalThis</strong></p></blockquote><pre><code>ES11 新增globalThis全局绝对对象，始终指向全局对象</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
